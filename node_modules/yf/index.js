/**
 * YF 框架
 * @constructor
 */

// Node模块
var Os = require('os');
var Fs = require('fs');
var Cluster = require('cluster');
var Events = require('events');
var Crypto = require('crypto');

// 第三方模块
var _ = require('lodash');
var Express = require('express');
var CookieParse = require('cookie-parser');
var CookieSession = require('cookie-session');
var BodyParser = require('body-parser');

// 模板 默认配置
var template = require('art-template/node/template-native.js');
var defaults = require('./lib/config.js');
var tools    = require('./lib/tools.js');


var App = Express();
var Md5 = function (text) {
    return Crypto.createHash('md5').update(text).digest('hex');
};

_.mixin(tools);

// 全局对象
global.YF = {
    _: _,
    md5: Md5
}

// constructor
function Yf(option) {

    if (!(this instanceof Yf)) {
        return new Yf(option);
    }

    this.app = App;
    this.template = template;

    this.setOption(option);
}

// prototype
Yf.prototype = {

    constructor: Yf,

    // events
    __proto__: Events.EventEmitter.prototype,

    init: function () {
        var _this = this,
            options = _this.options;

        // express 配置
        this.app.use('/public', Express.static('/public'));
        this.app.use(BodyParser.urlencoded({extended: false}));
        this.app.use(CookieParse('node-yf'));
        this.app.use(CookieSession(options.session));

        // 模板配置
        this.template.config('openTag', '<?');
        this.template.config('closeTag', '?>');
        this.template.config('extname', '.html');

        // 模板方法
        this.template.helper( '_',_ );
        this.template.helper( 'YF',YF );
        this.template.helper( 'Console',console );
        this.template.helper( 'Math',Math );
        this.template.helper('Date', function () {
            return new Date();
        });
        this.template.helper('parseInt', function (a) {
            return parseInt(a);
        });

        this.app.engine('.html', template.__express);
        this.app.set('views', options.root + 'application/template');
        this.app.set('view engine', 'html');

        this.listen(options.port).request();
    },

    setOption: function (option) {

        this.options = _.extend(defaults, option);

        this.options.root = _.trimRight( this.options.root ,'/' ) + '/';

        // 取相对的配置
        if (this.options.media != 'dev') {
            var mediaOption = {};
            try {
                mediaOption = require(this.options.root + 'application/config/' + this.options.media + '.js');
            } catch (e) {
                console.log('没有找到 ' + this.options.media + '配置文件' );
            }
            this.options = _.extend({}, this.options, mediaOption);
        }

    },

    request: function () {
        var _this = this,
            options = _this.options;

        _this.app.all('*', function (req, res) {
            // 这里做一些初始化操作，缓存，日志等

            _this.router(req, res);
        })

        return this;
    },

    router: function (req, res) {
        var _this = this,
            options = _this.options;

        // 路由
        req.pathInfo = req.path.substr(1).split('/');
        var controller = req.pathInfo[0] || 'index';
        var action     = req.pathInfo[1] || 'index';

        // 控制器
        var app = null;
        try {
            app = require(options.root + 'application/controller/' + controller);
        } catch(e) {
            console.log( e );
        }

        // 有对应的控制器
        if( app ) {
            if( app[action] ) {
                app[action](req, res);
            } else {
                //res.status(404).send('Not Found');
                res.sendStatus(404);
            }
        } else {
            res.sendStatus(404);
        }



    },

    // 监听端口
    listen: function (port) {
        var _this = this,
            options = _this.options;

        if (options.useCluster) {
            var numCPUs = Os.cpus().length;

            if (Cluster.isMaster) {
                for (var i = 0, len = numCPUs; i < len; i++) {
                    Cluster.fork({yf_media: options.media});
                }

                Cluster.on('listening', function (worker, address) {
                    console.log('[master] ' + 'listening: worker' + worker.id + ', port: ' + address.port);
                })

                Cluster.on('exit', function (worker, code) {
                    setTimeout(function () {
                        Cluster.fork({yf_media: options.media});
                    }, 1000);
                    console.log('[master] ' + 'exit: worker' + worker.id + ', code: ' + code);
                })
            } else {
                this.app.listen(port || 8080);
            }

        } else {
            this.app.listen(port || 8080);
        }

        return this;
    }
}

module.exports = Yf;