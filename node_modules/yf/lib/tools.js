
// 原型扩展
Number.prototype.formatMoney = function (places, symbol, thousand, decimal) {
    places = !isNaN(places = Math.abs(places)) ? places : 2;
    symbol = symbol !== undefined ? symbol : "$";
    thousand = thousand || ",";
    decimal = decimal || ".";
    var number = this,
        negative = number < 0 ? "-" : "",
        i = parseInt(number = Math.abs(+number || 0).toFixed(places), 10) + "",
        j = (j = i.length) > 3 ? j % 3 : 0;
    return symbol + negative + (j ? i.substr(0, j) + thousand : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + thousand) + (places ? decimal + Math.abs(number - i).toFixed(places).slice(2) : "");
};
// 数字转大写
Number.prototype.formatDx = function() {
    if (!/^(0|[1-9]\d*)(\.\d+)?$/.test(this))
        return "数据非法";
    var unit = "千百拾亿千百拾万千百拾元角分", str = "";
    n += "00";
    var p = n.indexOf('.');
    if (p >= 0)
        n = n.substring(0, p) + n.substr(p+1, 2);
    unit = unit.substr(unit.length - n.length);
    for (var i=0; i < n.length; i++)
        str += '零壹贰叁肆伍陆柒捌玖'.charAt(n.charAt(i)) + unit.charAt(i);
    return str.replace(/零(千|百|拾|角)/g, "零").replace(/(零)+/g, "零").replace(/零(万|亿|元)/g, "$1").replace(/(亿)万|壹(拾)/g, "$1$2").replace(/^元零?|零分/g, "").replace(/元$/g, "元整");
}

// 日期格式化
Date.prototype.format = function (fmt) { //author: meizz
    var o = {
        "M+": this.getMonth() + 1, //月份
        "d+": this.getDate(), //日
        "h+": this.getHours(), //小时
        "H+": this.getHours(), //小时
        "m+": this.getMinutes(), //分
        "s+": this.getSeconds(), //秒
        "q+": Math.floor((this.getMonth() + 3) / 3), //季度
        "S": this.getMilliseconds() //毫秒
    };
    if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length));
    for (var k in o)
        if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)));
    return fmt;
}

// 自定义扩展的方法
module.exports = {

    // 保留几位小数
    formatNum: function (num, l) {
        return ((num || 0) / 10000).toFixed(l || 2);
    },

    // 把电话号码中间那几位变成*
    hidePhone: function (phone) {
        phone = phone || '';
        return (phone + '').replace(/^(\d{3})\d{4}(\d{4})$/g,function($0, $1, $2){
            return $1 + "****" + $2;
        })
    },

    // 超出省略号
    ellipsis: function (text, num, ell) {
        num = num || 1000000;
        ell = ell || '...';
        if( typeof text != 'string') {
            return "";
        } else {
            if( text.length > num ) {
                return text.substring(0, num) + ell;
            } else {
                return text;
            }
        }
    },

    // 让图片在一个容器里面的等比例绽放并居中
    imgCenter: function (iw, ih, bw, bh) {

        if( arguments.length != 4 ) {
            return {
                style : 'data-unknown="true" data-width="'+iw+'" data-height="'+ih+'"'
            };
        }

        var result = {};

        var scaleX = iw / bw;
        var scaleY = ih / bh;
        var scaleMin = scaleX < scaleY ? scaleX : scaleY;
        var scaleMax = scaleX > scaleY ? scaleX : scaleY;

        // 放大操作
        result.width  = parseInt(iw / scaleMin);
        result.height = parseInt(ih / scaleMin);
        result.left   = parseInt((result.width  - bw) / -2);
        result.top    = parseInt((result.height - bh) / -2);

        result.style = [
            'left:' + result.left + 'px;',
            'top:' + result.top + 'px;',
            'width:' + result.width + 'px;',
            'height:' + result.height + 'px;'
        ].join('');

        result.style = 'style=' + result.style + '';

        return result;
    },

    //可视化日期
    niceTime: function () {
        var date;
        if (typeof arguments[0] == 'number' || typeof arguments[0] == 'string') {
            date = new Date(arguments[0]);
        } else {
            date = arguments[0];
        }

        var now = new Date();

        var deltaTime = (now.getTime() - date.getTime()) / 1000;
        if (deltaTime < 60) {
            return '刚刚';
        } else if (deltaTime >= 60 && deltaTime < 3600) {
            return parseInt(deltaTime / 60) + '分钟前';
        } else if (deltaTime >= 3600 && this.date(date) == this.date(now)) {
            return this.date(date, 'HH:mm');
        } else if (date.getFullYear() == now.getFullYear()) {
            return this.date(date, 'MM-dd');
        } else {
            return this.date(date);
        }
    },

    // 日期
    "date": function () {

        var date,
            format = 'yyyy-MM-dd',
            args = arguments;

        for (var i = 0; i < args.length; i++) {
            switch (typeof args[i]) {
                case 'object':
                    date = args[i];
                    break;
                case 'number':
                    date = new Date(args[i]);
                    break;
                case 'string':
                    date && (format = args[i]) || (date = new Date(args[i]));
                    break;
            }
        }

        date || (date = new Date());

        if (typeof args[0] !== 'undefined') {
            return new Date(date).format(format);
        } else {
            return '';
        }
    },

    // 容量转字节
    toByte: function (val) {
        if (val) {
            var valUnit = ((val+'').replace(/(\d|\.)/ig, '') || 'M').toUpperCase();
            var unit = ['B', 'KB', 'MB', 'GB', 'TB', 'B', 'K', 'M', 'G', 'T'];
            val = parseFloat(val);
            if (valUnit.length > 0) {
                var len = unit.indexOf(valUnit);
                len = len > unit.length / 2 - 1 ? len - unit.length / 2 : len;
                for (var i = 0; i < len; i++) {
                    val *= 1024;
                }
            }
            return val;
        }
        return 0;
    },

    // 字节转容量
    bytesToSize: function (bytes) {
        if (bytes === 0) return '0B';
        var k = 1024, // or 1024
            sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
            i = Math.floor(Math.log(bytes) / Math.log(k));

        return (bytes / Math.pow(k, i)).toPrecision(3) + '' + sizes[i];
    },

    // 是否为中文
    isChn: function (str) {
        var reg = /^([\u4E00-\u9FA5]|[\uFE30-\uFFA0])*$/;
        if(reg.test(str)){
            return false;
        }
        return true;
    }

}